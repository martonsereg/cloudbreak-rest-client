import org.ajoberstar.grgit.Grgit
import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.gradle.git.release.opinion.Strategies.PreRelease
import org.ajoberstar.gradle.git.release.semver.ChangeScope
import org.ajoberstar.gradle.git.release.semver.PartialSemVerStrategy
import org.ajoberstar.gradle.git.release.semver.SemVerStrategy
import static org.ajoberstar.gradle.git.release.semver.StrategyUtil.*

final class CustomStrategies {

    static final class Custom {
        static final PartialSemVerStrategy INCREMENT_FROM_RC = closure { state ->
            def oldNormal = state.nearestVersion.any
            if (state.nearestVersion.any.preReleaseVersion.contains("rc")) {
                switch (state.scopeFromProp) {
                    case ChangeScope.MAJOR:
                        return state.copyWith(inferredNormal: oldNormal.incrementMajorVersion())
                    case ChangeScope.MINOR:
                        return state.copyWith(inferredNormal: oldNormal.incrementMinorVersion())
                    case ChangeScope.PATCH:
                        return state.copyWith(inferredNormal: oldNormal.incrementPatchVersion())
                    default:
                        return state
                }
            } else {
                return state.copyWith(inferredNormal: oldNormal.normalVersion)
            }
        }
    }

    static final SemVerStrategy DEV = Strategies.DEFAULT.copyWith(
            name: 'development',
            stages: ['dev'] as SortedSet,
            normalStrategy: Custom.INCREMENT_FROM_RC,
            preReleaseStrategy: all(PreRelease.STAGE_FIXED, PreRelease.COUNT_INCREMENTED),
            allowDirtyRepo: false
    )
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:1.2.0"
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    }
}


apply plugin: 'org.ajoberstar.release-opinion'

tasks.release.dependsOn 'build'

release {
    // need to specify the repository to interact with
    grgit = Grgit.open(project.file('.'))

    versionStrategy Strategies.FINAL
    versionStrategy Strategies.PRE_RELEASE
    versionStrategy CustomStrategies.DEV

    // set the default, can be one already added or something else
    defaultVersionStrategy = CustomStrategies.DEV

    tagStrategy {
        prefixNameWithV = false // defaults to true
    }

    // the approach to creating tags can also be modified
//    tagStrategy {
//        prefixNameWithV = false // defaults to true
//        generateMessage = { version -> "My new version $version.version" }
//    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'license-report'
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.7
group = 'com.sequenceiq'

allprojects {
//    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())
}

jar {
    baseName = 'cloudbreak-rest-client'
    manifest {
        attributes 'Main-Class': 'com.sequenceiq.cloudbreak.main.CloudbreakClientMain'
    }

}

configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "s3://maven.sequenceiq.com/releases") {
                authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
            }
            snapshotRepository(url: "s3://maven.sequenceiq.com/snapshots") {
                authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url "http://maven.sequenceiq.com/snapshots" }
    maven { url "http://maven.sequenceiq.com/release" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/releases" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/snapshots" }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-log4j12:1.7.7'
    compile 'org.codehaus.groovy:groovy-all:2.1.8'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testCompile 'org.easymock:easymock:3.2'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    deployerJars 'org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE'
}

task wrapper(type: Wrapper) { gradleVersion = "2.3" }

task buildInfo(type: BuildInfoTask) {
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

compileJava.dependsOn buildInfo
mainClassName = "com.sequenceiq.cloudbreak.main.CloudbreakClientMain"

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        destination.mkdirs()
        File applicationDestination = new File(applicationPropertiesPath + "/resources/main")
        applicationDestination.mkdirs()
        new File(destination, "build.info").withWriter { out ->
            [
                    "ARTIFACT_BASENAME=" + basename,
                    "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        new File(applicationDestination, "application.properties").withWriter { out ->
            [
                    "info.app.name=" + basename,
                    "info.app.version=" + buildVersion
            ].each { out.println it }
        }
    }
}

artifacts {
    archives sourcesJar
}
